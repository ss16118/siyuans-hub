{"version":3,"sources":["components/siteContext.jsx","components/languageSelector.jsx","components/sidebar.jsx","components/postSection.jsx","pages/blog.jsx","components/projectSection.jsx","pages/projects.jsx","components/markdownSection.jsx","pages/home.jsx","App.js","serviceWorker.js","index.js"],"names":["globalContext","React","createContext","GlobalContextProvider","children","useState","context","lang","get","set","Provider","value","LanguageSelector","props","handleLanguageSelection","e","language","setState","state","ToggleButtonGroup","size","this","exclusive","onChange","aria-label","ToggleButton","Flag","name","Component","contextType","NavigationMenu","tabs","handleItemClick","id","activeItem","itemName","window","location","pathname","substr","charAt","toUpperCase","slice","displayIndex","font","Grid","Column","width","to","style","marginTop","marginLeft","marginBottom","fontFamily","fontSize","color","Image","src","verticalAlign","marginRight","onMouseEnter","target","onMouseLeave","Menu","fluid","vertical","tabular","map","tab","Item","key","as","Link","active","onClick","attached","textAlign","border","PostSection","title","date","tags","Card","Content","Header","Description","extra","undefined","tag","Label","Blog","pageTitle","en","cn","ProjectSection","buttonText","buttonIcon","description","link","isDocument","startsWith","align","Button","href","Icon","Projects","Segment","Group","itemsPerRow","projectData","project","MarkdownSection","markdownText","filePath","fetch","then","response","text","loadMarkdown","Container","escapeHtml","source","Home","bioPath","App","figlet","parseFont","standard","_","data","console","log","Fragment","height","position","stretched","padding","overflow","path","exact","component","postData","post","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3281d231.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const globalContext = React.createContext({});\r\n\r\nconst GlobalContextProvider = ({ children }) => {\r\n  const [language, setLanguage] = React.useState(\"en\");\r\n\r\n  const context = {\r\n    lang: {\r\n      get: language,\r\n      set: setLanguage,\r\n    },\r\n  };\r\n  return (\r\n    <globalContext.Provider value={context}>{children}</globalContext.Provider>\r\n  );\r\n};\r\n\r\nexport default GlobalContextProvider;\r\n","import React, { Component } from \"react\";\r\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\r\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\r\nimport { globalContext } from \"./siteContext\";\r\nimport { Flag } from \"semantic-ui-react\";\r\n\r\nclass LanguageSelector extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      language: \"en\",\r\n    };\r\n  }\r\n\r\n  handleLanguageSelection = (e, language) => {\r\n    if (language !== null) {\r\n      this.setState({ language: language });\r\n      this.context.lang.set(language);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <ToggleButtonGroup\r\n          size=\"small\"\r\n          value={this.state.language}\r\n          exclusive\r\n          onChange={this.handleLanguageSelection}\r\n          aria-label=\"website language\"\r\n        >\r\n          <ToggleButton value=\"en\" aria-label=\"English\">\r\n            <Flag name={\"gb\"} /> en\r\n          </ToggleButton>\r\n          <ToggleButton value=\"cn\" aria-label=\"Chinese\">\r\n            <Flag name={\"cn\"} /> cn\r\n          </ToggleButton>\r\n        </ToggleButtonGroup>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nLanguageSelector.contextType = globalContext;\r\nexport default LanguageSelector;\r\n","import React, { Component } from \"react\";\r\nimport { Grid, Menu } from \"semantic-ui-react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport LanguageSelector from \"./languageSelector\";\r\nimport { globalContext } from \"./siteContext\";\r\nimport { Image } from \"semantic-ui-react\";\r\n\r\nclass NavigationMenu extends Component {\r\n  tabs = [\r\n    [\"Home\", \"首页\", \"/siyuans-hub/\"],\r\n    [\"Blog\", \"博客\", \"/siyuans-hub/blog\"],\r\n    [\"Projects\", \"项目\", \"/siyuans-hub/projects\"],\r\n  ];\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    let itemName = window.location.pathname.substr(13);\r\n    itemName =\r\n      itemName === \"\"\r\n        ? \"Home\"\r\n        : itemName.charAt(0).toUpperCase() + itemName.slice(1);\r\n    this.state = { activeItem: itemName };\r\n  }\r\n\r\n  handleItemClick = (e, { id }) => this.setState({ activeItem: id });\r\n\r\n  render() {\r\n    const { activeItem } = this.state;\r\n    const displayIndex = this.context.lang.get === \"en\" ? 0 : 1;\r\n    const font =\r\n      this.context.lang.get === \"en\" ? \"JetBrains Mono\" : \"Noto Sans\";\r\n    return (\r\n      <Grid.Column width={3}>\r\n        <Link to=\"/\">\r\n          <div\r\n            style={{\r\n              marginTop: \"1em\",\r\n              marginLeft: \"1em\",\r\n              marginBottom: \"1.5em\",\r\n              fontFamily: \"JetBrains Mono\",\r\n              fontSize: \"18px\",\r\n              color: \"black\",\r\n            }}\r\n          >\r\n            <Image\r\n              src=\"/siyuans-hub/favicon/favicon-32x32.png\"\r\n              verticalAlign=\"middle\"\r\n              style={{ marginRight: \"0.5em\" }}\r\n            />\r\n            <span\r\n              onMouseEnter={(e) => {\r\n                e.target.style.color = \"gray\";\r\n              }}\r\n              onMouseLeave={(e) => {\r\n                e.target.style.color = \"black\";\r\n              }}\r\n            >\r\n              Siyuan's Hub\r\n            </span>\r\n          </div>\r\n        </Link>\r\n        <Menu fluid vertical tabular>\r\n          {this.tabs.map((tab) => {\r\n            return (\r\n              <Menu.Item\r\n                key={tab[0]}\r\n                id={tab[0]}\r\n                name={tab[displayIndex]}\r\n                as={Link}\r\n                to={tab[2]}\r\n                style={{ fontFamily: font }}\r\n                active={activeItem === tab[0]}\r\n                onClick={this.handleItemClick}\r\n              />\r\n            );\r\n          })}\r\n          <Menu.Item\r\n            attached=\"bottom\"\r\n            style={{ marginTop: \"185%\", textAlign: \"center\", border: \"none\" }}\r\n          >\r\n            <LanguageSelector />\r\n          </Menu.Item>\r\n        </Menu>\r\n      </Grid.Column>\r\n    );\r\n  }\r\n}\r\nNavigationMenu.contextType = globalContext;\r\nexport default NavigationMenu;\r\n","import React, { Component } from \"react\";\r\nimport { globalContext } from \"./siteContext\";\r\nimport { Card, Label } from \"semantic-ui-react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass PostSection extends Component {\r\n  state = {};\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      id: props.id,\r\n      title: props.title,\r\n      date: props.date,\r\n      tags: props.tags,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Card fluid as={Link} to={`/blog/${this.state.id}`}>\r\n        <Card.Content>\r\n          <Card.Header style={{ fontSize: \"16px\", marginBottom: \"0.3em\" }}>\r\n            {this.state.title}\r\n          </Card.Header>\r\n          <Card.Description style={{ color: \"gray\", marginBottom: \"0.3em\" }}>\r\n            <span>{this.state.date}</span>\r\n          </Card.Description>\r\n          <Card.Content extra>\r\n            {this.state.tags !== undefined &&\r\n              this.state.tags.map((tag) => {\r\n                return <Label key={tag}>{tag}</Label>;\r\n              })}\r\n          </Card.Content>\r\n        </Card.Content>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nPostSection.contextType = globalContext;\r\nexport default PostSection;\r\n","import React, { Component } from \"react\";\r\nimport { globalContext } from \"../components/siteContext\";\r\nimport PostSection from \"../components/postSection\";\r\nimport { Card, Container, Segment } from \"semantic-ui-react\";\r\nimport postData from \"../data/post-data.json\";\r\n\r\nclass Blog extends Component {\r\n  state = {};\r\n  pageTitle = { en: \"Blog\", cn: \"博客\" };\r\n  render() {\r\n    const lang = this.context.lang.get;\r\n    const font = lang === \"en\" ? \"JetBrains Mono\" : \"Noto Sans\";\r\n    return (\r\n      <div>\r\n        <h1 style={{ fontFamily: font }}>{this.pageTitle[lang]}</h1>\r\n        {/* \r\n        <Segment secondary>\r\n          <Container>\r\n            <Card.Group>\r\n              {postData.map((post) => {\r\n                return (\r\n                  <PostSection\r\n                    key={post.title[lang]}\r\n                    style={{ fontFamily: font }}\r\n                    id={post.id}\r\n                    title={post.title[lang]}\r\n                    date={post.date}\r\n                    tags={post.tags[lang]}\r\n                  />\r\n                );\r\n              })}\r\n            </Card.Group>\r\n          </Container>\r\n        </Segment>\r\n        */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nBlog.contextType = globalContext;\r\nexport default Blog;\r\n","import React, { Component } from \"react\";\r\nimport { Card, Button, Icon } from \"semantic-ui-react\";\r\n\r\nclass ProjectSection extends Component {\r\n  buttonText = {\r\n    en: [\"View Source Code\", \"View Document\"],\r\n    cn: [\"查看源代码\", \"查看文件\"],\r\n  };\r\n  buttonIcon = [\"github\", \"file\"];\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      title: props.title,\r\n      lang: props.lang,\r\n      description: props.description,\r\n      link: props.link,\r\n    };\r\n  }\r\n  render() {\r\n    const isDocument = !this.state.link.startsWith(\"https\");\r\n    const buttonText = this.buttonText[this.state.lang][isDocument | 0];\r\n    const buttonIcon = this.buttonIcon[isDocument | 0];\r\n    const font = this.state.lang === \"en\" ? \"JetBrains Mono\" : \"Noto Sans\";\r\n    return (\r\n      <Card style={{ fontFamily: font }}>\r\n        <Card.Content>\r\n          <Card.Header style={{ fontFamily: font }}>\r\n            {this.state.title}\r\n          </Card.Header>\r\n          <Card.Description>{this.state.description}</Card.Description>\r\n        </Card.Content>\r\n        <Card.Content extra align=\"right\">\r\n          <Button\r\n            color=\"linkedin\"\r\n            href={this.state.link}\r\n            style={{ fontFamily: font }}\r\n          >\r\n            <Icon name={buttonIcon} />\r\n            {buttonText}\r\n          </Button>\r\n        </Card.Content>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProjectSection;\r\n","import React, { Component } from \"react\";\r\nimport { globalContext } from \"../components/siteContext\";\r\nimport projectData from \"../data/projects-data.json\";\r\nimport ProjectSection from \"../components/projectSection\";\r\nimport { Card, Segment } from \"semantic-ui-react\";\r\n\r\nclass Projects extends Component {\r\n  state = {};\r\n  pageTitle = { en: \"Projects\", cn: \"项目\" };\r\n  render() {\r\n    const lang = this.context.lang.get;\r\n    const font = lang === \"en\" ? \"JetBrains Mono\" : \"Noto Sans\";\r\n    return (\r\n      <div>\r\n        <h1 style={{ fontFamily: font }}>{this.pageTitle[lang]}</h1>\r\n        <Segment>\r\n          <Card.Group itemsPerRow={2}>\r\n            {projectData.map((project) => {\r\n              return (\r\n                <ProjectSection\r\n                  key={project.title[lang] + lang}\r\n                  lang={lang}\r\n                  title={project.title[lang]}\r\n                  description={project.description[lang]}\r\n                  link={project.link}\r\n                />\r\n              );\r\n            })}\r\n          </Card.Group>\r\n        </Segment>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nProjects.contextType = globalContext;\r\nexport default Projects;\r\n","import React, { Component } from \"react\";\r\nimport ReactMarkdown from \"react-markdown\";\r\nimport { Container } from \"semantic-ui-react\";\r\n\r\nclass MarkdownSection extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      lang: props.lang,\r\n      markdownText: null,\r\n      filePath: props.filePath,\r\n    };\r\n  }\r\n\r\n  async loadMarkdown() {\r\n    await fetch(this.state.filePath)\r\n      .then((response) => response.text())\r\n      .then((text) => this.setState({ markdownText: text }));\r\n  }\r\n\r\n  UNSAFE_componentWillMount() {\r\n    this.loadMarkdown();\r\n  }\r\n  render() {\r\n    const font = this.state.lang === \"en\" ? \"JetBrains Mono\" : \"Noto Sans\";\r\n    return (\r\n      <div style={{ fontFamily: font }}>\r\n        <Container textAlign=\"justified\">\r\n          <ReactMarkdown escapeHtml={false} source={this.state.markdownText} />\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default MarkdownSection;\r\n","import React, { Component } from \"react\";\r\nimport { globalContext } from \"../components/siteContext\";\r\nimport MarkdownSection from \"../components/markdownSection\";\r\n\r\nclass Home extends Component {\r\n  render() {\r\n    const bioPath =\r\n      \"/siyuans-hub/contents/bio-\" + this.context.lang.get + \".md\";\r\n    const pageContent = (\r\n      <MarkdownSection\r\n        key={bioPath}\r\n        filePath={bioPath}\r\n        lang={this.context.lang.get}\r\n      />\r\n    );\r\n    return pageContent;\r\n  }\r\n}\r\nHome.contextType = globalContext;\r\n\r\nexport default Home;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport NavigationMenu from \"./components/sidebar\";\nimport Blog from \"./pages/blog\";\nimport Projects from \"./pages/projects\";\nimport Home from \"./pages/home\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { Grid, Segment } from \"semantic-ui-react\";\nimport { globalContext } from \"./components/siteContext\";\nimport MarkdownSection from \"./components/markdownSection\";\nimport postData from \"./data/post-data.json\";\nimport figlet from \"figlet\";\nimport standard from \"figlet/importable-fonts/Standard.js\";\n\nclass App extends Component {\n  state = {};\n  render() {\n    /* Easter Egg */\n    figlet.parseFont(\"Standard\", standard);\n    figlet.text(\n      \"Welcome to\\nSiyuan's Hub\",\n      {\n        font: \"Standard\",\n      },\n      function (_, data) {\n        console.log(data);\n      }\n    );\n\n    const lang = this.context.lang.get;\n\n    return (\n      <Router>\n        <React.Fragment>\n          <Grid\n            style={{\n              height: \"100vh\",\n              width: \"100%\",\n              position: \"fixed\",\n              marginTop: \"0em\",\n            }}\n          >\n            <NavigationMenu />\n            <Grid.Column stretched width={10} style={{ height: \"100%\" }}>\n              <Segment style={{ padding: \"1.5em\", overflow: \"auto\" }}>\n                <Switch>\n                  <Route path=\"/siyuans-hub/\" exact component={Home} />\n                  <Route path=\"/siyuans-hub/blog\" exact component={Blog} />\n                  <Route\n                    path=\"/siyuans-hub/projects\"\n                    exact\n                    component={Projects}\n                  />\n                  {/* Posts */}\n                  {postData.map((post) => {\n                    return (\n                      <Route\n                        key={post.title[lang]}\n                        exact\n                        path={`/blog/${post.id}`}\n                      >\n                        <MarkdownSection\n                          filePath={post.path[lang]}\n                          lang={lang}\n                        />\n                      </Route>\n                    );\n                  })}\n                </Switch>\n              </Segment>\n            </Grid.Column>\n          </Grid>\n        </React.Fragment>\n      </Router>\n    );\n  }\n}\nApp.contextType = globalContext;\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport GlobalContextProvider from \"./components/siteContext\";\n\nReactDOM.render(\n  <GlobalContextProvider>\n    <App />\n  </GlobalContextProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}